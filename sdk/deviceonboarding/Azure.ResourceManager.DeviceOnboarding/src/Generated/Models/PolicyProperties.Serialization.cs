// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    public partial class PolicyProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("status"u8);
            writer.WriteStringValue(Status.ToString());
            writer.WritePropertyName("bootstrapAuthentication"u8);
            writer.WriteObjectValue(BootstrapAuthentication);
            if (Optional.IsCollectionDefined(Allocations))
            {
                writer.WritePropertyName("allocations"u8);
                writer.WriteStartArray();
                foreach (var item in Allocations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Jit))
            {
                writer.WritePropertyName("jit"u8);
                writer.WriteObjectValue(Jit);
            }
            writer.WritePropertyName("resourceDetails"u8);
            writer.WriteObjectValue(ResourceDetails);
            if (Optional.IsDefined(SelectedIdentity))
            {
                writer.WritePropertyName("selectedIdentity"u8);
                writer.WriteObjectValue(SelectedIdentity);
            }
            writer.WriteEndObject();
        }

        internal static PolicyProperties DeserializePolicyProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string description = default;
            PolicyStatusOption status = default;
            ProvisioningState? provisioningState = default;
            BootstrapAuthenticationRule bootstrapAuthentication = default;
            IList<AllocationRule> allocations = default;
            JitRule jit = default;
            PolicyResourceDetails resourceDetails = default;
            SelectedIdentity selectedIdentity = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = new PolicyStatusOption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("bootstrapAuthentication"u8))
                {
                    bootstrapAuthentication = BootstrapAuthenticationRule.DeserializeBootstrapAuthenticationRule(property.Value);
                    continue;
                }
                if (property.NameEquals("allocations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AllocationRule> array = new List<AllocationRule>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AllocationRule.DeserializeAllocationRule(item));
                    }
                    allocations = array;
                    continue;
                }
                if (property.NameEquals("jit"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    jit = JitRule.DeserializeJitRule(property.Value);
                    continue;
                }
                if (property.NameEquals("resourceDetails"u8))
                {
                    resourceDetails = PolicyResourceDetails.DeserializePolicyResourceDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("selectedIdentity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    selectedIdentity = SelectedIdentity.DeserializeSelectedIdentity(property.Value);
                    continue;
                }
            }
            return new PolicyProperties(
                description,
                status,
                provisioningState,
                bootstrapAuthentication,
                allocations ?? new ChangeTrackingList<AllocationRule>(),
                jit,
                resourceDetails,
                selectedIdentity);
        }
    }
}
