// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    public partial class DeviceStateProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("registrationId"u8);
            writer.WriteStringValue(RegistrationId);
            if (Optional.IsDefined(DiscoveryEnabled))
            {
                writer.WritePropertyName("discoveryEnabled"u8);
                writer.WriteStringValue(DiscoveryEnabled.Value.ToString());
            }
            writer.WritePropertyName("onboardingStatus"u8);
            writer.WriteStringValue(OnboardingStatus.ToString());
            writer.WritePropertyName("policyResourceId"u8);
            writer.WriteStringValue(PolicyResourceId);
            if (Optional.IsCollectionDefined(AllocatedEndpoints))
            {
                writer.WritePropertyName("allocatedEndpoints"u8);
                writer.WriteStartArray();
                foreach (var item in AllocatedEndpoints)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static DeviceStateProperties DeserializeDeviceStateProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string registrationId = default;
            DiscoveryOption? discoveryEnabled = default;
            OnboardingStatus onboardingStatus = default;
            ResourceIdentifier policyResourceId = default;
            IList<AllocatedEndpoint> allocatedEndpoints = default;
            ProvisioningState? provisioningState = default;
            DateTimeOffset? onboardUntilDate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("registrationId"u8))
                {
                    registrationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("discoveryEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    discoveryEnabled = new DiscoveryOption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("onboardingStatus"u8))
                {
                    onboardingStatus = new OnboardingStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("policyResourceId"u8))
                {
                    policyResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("allocatedEndpoints"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AllocatedEndpoint> array = new List<AllocatedEndpoint>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AllocatedEndpoint.DeserializeAllocatedEndpoint(item));
                    }
                    allocatedEndpoints = array;
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("onboardUntilDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    onboardUntilDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new DeviceStateProperties(
                registrationId,
                discoveryEnabled,
                onboardingStatus,
                policyResourceId,
                allocatedEndpoints ?? new ChangeTrackingList<AllocatedEndpoint>(),
                provisioningState,
                onboardUntilDate);
        }
    }
}
