// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    public partial class CertificateProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("keyType"u8);
            writer.WriteStringValue(KeyType.ToString());
            writer.WriteEndObject();
        }

        internal static CertificateProperties DeserializeCertificateProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            SupportedKeyType keyType = default;
            string subject = default;
            int? validityPeriodInDays = default;
            DateTimeOffset? validityNotBefore = default;
            DateTimeOffset? validityNotAfter = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("keyType"u8))
                {
                    keyType = new SupportedKeyType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("subject"u8))
                {
                    subject = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("validityPeriodInDays"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validityPeriodInDays = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("validityNotBefore"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validityNotBefore = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("validityNotAfter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validityNotAfter = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new CertificateProperties(keyType, subject, validityPeriodInDays, validityNotBefore, validityNotAfter);
        }
    }
}
