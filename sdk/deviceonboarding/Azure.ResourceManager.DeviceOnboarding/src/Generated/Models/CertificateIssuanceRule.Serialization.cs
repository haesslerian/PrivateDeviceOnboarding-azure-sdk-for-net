// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    public partial class CertificateIssuanceRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("issuingAuthority"u8);
            writer.WriteStringValue(IssuingAuthority.ToString());
            writer.WritePropertyName("certificateAuthorityConfiguration"u8);
            writer.WriteObjectValue(CertificateAuthorityConfiguration);
            writer.WritePropertyName("leafCertificateConfiguration"u8);
            writer.WriteObjectValue(LeafCertificateConfiguration);
            writer.WritePropertyName("renewalInterval"u8);
            writer.WriteNumberValue(RenewalInterval);
            writer.WriteEndObject();
        }

        internal static CertificateIssuanceRule DeserializeCertificateIssuanceRule(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            SupportedIssuingAuthority issuingAuthority = default;
            CaConfig certificateAuthorityConfiguration = default;
            CertPolicyConfig leafCertificateConfiguration = default;
            int renewalInterval = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("issuingAuthority"u8))
                {
                    issuingAuthority = new SupportedIssuingAuthority(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("certificateAuthorityConfiguration"u8))
                {
                    certificateAuthorityConfiguration = CaConfig.DeserializeCaConfig(property.Value);
                    continue;
                }
                if (property.NameEquals("leafCertificateConfiguration"u8))
                {
                    leafCertificateConfiguration = CertPolicyConfig.DeserializeCertPolicyConfig(property.Value);
                    continue;
                }
                if (property.NameEquals("renewalInterval"u8))
                {
                    renewalInterval = property.Value.GetInt32();
                    continue;
                }
            }
            return new CertificateIssuanceRule(issuingAuthority, certificateAuthorityConfiguration, leafCertificateConfiguration, renewalInterval);
        }
    }
}
