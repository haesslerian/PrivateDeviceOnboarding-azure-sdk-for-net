// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    public partial class OnboardingServiceProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("enableCertificateManagement"u8);
            writer.WriteBooleanValue(EnableCertificateManagement);
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                writer.WritePropertyName("publicNetworkAccess"u8);
                writer.WriteStringValue(PublicNetworkAccess.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static OnboardingServiceProperties DeserializeOnboardingServiceProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ProvisioningState? provisioningState = default;
            DeviceEndpoints deviceEndpoints = default;
            bool enableCertificateManagement = default;
            PublicNetworkAccessOption? publicNetworkAccess = default;
            IReadOnlyList<DeviceOnboardingPrivateEndpointConnection> privateEndpointConnections = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deviceEndpoints"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deviceEndpoints = DeviceEndpoints.DeserializeDeviceEndpoints(property.Value);
                    continue;
                }
                if (property.NameEquals("enableCertificateManagement"u8))
                {
                    enableCertificateManagement = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("publicNetworkAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publicNetworkAccess = new PublicNetworkAccessOption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("privateEndpointConnections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DeviceOnboardingPrivateEndpointConnection> array = new List<DeviceOnboardingPrivateEndpointConnection>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DeviceOnboardingPrivateEndpointConnection.DeserializeDeviceOnboardingPrivateEndpointConnection(item));
                    }
                    privateEndpointConnections = array;
                    continue;
                }
            }
            return new OnboardingServiceProperties(provisioningState, deviceEndpoints, enableCertificateManagement, publicNetworkAccess, privateEndpointConnections ?? new ChangeTrackingList<DeviceOnboardingPrivateEndpointConnection>());
        }
    }
}
