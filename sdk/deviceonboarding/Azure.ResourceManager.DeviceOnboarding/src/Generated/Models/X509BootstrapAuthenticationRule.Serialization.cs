// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DeviceOnboarding.Models
{
    public partial class X509BootstrapAuthenticationRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("primaryCertificate"u8);
            writer.WriteObjectValue(PrimaryCertificate);
            if (Optional.IsDefined(SecondaryCertificate))
            {
                writer.WritePropertyName("secondaryCertificate"u8);
                writer.WriteObjectValue(SecondaryCertificate);
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(AuthenticationType.ToString());
            writer.WriteEndObject();
        }

        internal static X509BootstrapAuthenticationRule DeserializeX509BootstrapAuthenticationRule(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            X509Certificate primaryCertificate = default;
            X509Certificate secondaryCertificate = default;
            BootstrapAuthenticationType type = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("primaryCertificate"u8))
                {
                    primaryCertificate = X509Certificate.DeserializeX509Certificate(property.Value);
                    continue;
                }
                if (property.NameEquals("secondaryCertificate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    secondaryCertificate = X509Certificate.DeserializeX509Certificate(property.Value);
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new BootstrapAuthenticationType(property.Value.GetString());
                    continue;
                }
            }
            return new X509BootstrapAuthenticationRule(type, primaryCertificate, secondaryCertificate);
        }
    }
}
